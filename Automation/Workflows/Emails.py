"""
Este m√≥dulo se encuentra en el n√∫cleo de la capa de Orquestaci√≥n, proporcionando las utilidades cr√≠ticas para
ejecutar otros m√≥dulos Python de forma segura y para gestionar el env√≠o automatizado de reportes de estado 
por correo electr√≥nico v√≠a Microsoft Outlook (API COM).
Funci√≥nProp√≥sito Principal 
    * execute_file_py:Ejecuta un m√≥dulo ETL externo (subprocess), a√≠sla el proceso
                    y captura el c√≥digo de salida y el mensaje de error.
    * correo: Env√≠a el correo electr√≥nico de forma s√≠ncrona 
              usando win32com.client, incluyendo l√≥gica robusta de liberaci√≥n de objetos COM.
    * send_etl_report: Determina el estado global del ETL (√âxito/Fallo), formatea el subject y el cuerpo HTML con el resumen de errores, 
                     y llama a correo.
"""
#====================
#--- LIBRERIAS
#====================
import subprocess
import win32com.client as win32
import pythoncom
import time
from pathlib import Path
from typing import Dict, Tuple
import gc

def execute_file_py(modulo: str, directorio: Path) -> tuple[int, str]:
    """
    Ejecuta un m√≥dulo Python y captura el c√≥digo de salida y el output de error.
    Retorna: (c√≥digo_salida, mensaje_error_o_output)
    """
    try:
        # Usamos subprocess.run() que es m√°s simple y bloquea hasta terminar.
        # Capturamos stdout y stderr para el reporte.
        resultado = subprocess.run(
            ["python", "-m", modulo],
            cwd=directorio,
            capture_output=True, # Captura stdout y stderr
            text=True,           # Decodifica el output a texto
            check=False,
            env={"PYTHONIOENCODING": "utf-8"}          # No lanza excepci√≥n por c√≥digo de salida != 0
        )
        
        codigo_salida = resultado.returncode
        
        if codigo_salida != 0:
            # Si falla, retornamos el stderr (el error del script)
            output = resultado.stderr
            print(f"| ‚ùå ERROR al ejecutar {modulo}. C√≥digo: {codigo_salida}")
        else:
            # Si tiene √©xito, retornamos el stdout (para un posible log de √©xito)
            output = resultado.stdout
            print(f"| ‚úÖ √âxito al ejecutar {modulo}")
            
        return codigo_salida, output.strip() # Devolvemos c√≥digo y output/error

    except FileNotFoundError:
        # Esto ocurre si 'python' no est√° en PATH o el 'directorio' es inv√°lido
        error_msg = f"ERROR CR√çTICO (99): No se encontr√≥ 'python' o ruta {directorio} inv√°lida."
        print(error_msg)
        return 99, error_msg
    except Exception as e:
        error_msg = f"ERROR INESPERADO (100) en orquestaci√≥n: {e}"
        print(error_msg)
        return 100, error_msg

def correo(destinatarios: list[str], subject: str, body: str):
    """Env√≠a un correo electr√≥nico a una lista de destinatarios usando Outlook."""
    outlook=None
    mail=None
    
    if not destinatarios:
        print("Advertencia: No hay destinatarios definidos.")
        return

    try:
        outlook = win32.Dispatch("Outlook.Application")
        mail = outlook.CreateItem(0)
        
        # Unir todos los destinatarios en una sola cadena (m√°s eficiente)
        mail.To = "; ".join(destinatarios)
        mail.Subject = subject
        
        # Usamos HTMLBody para manejar mejor los saltos de l√≠nea y formateo
        # Aqu√≠ es donde el Body de tu reporte ETL se ver√° bien.
        mail.HTMLBody = body 
        
        mail.Send()
        print(f"Correo enviado a: {mail.To}")
        time.sleep(15) # El time.sleep(10) es opcional, puede ser √∫til si los procesos son muy r√°pidos y Outlook necesita tiempo.    
    finally:
        # üí° LIBERACI√ìN EXPL√çCITA Y ROBUSTA (Tu c√≥digo, que es correcto)
        if mail is not None:
             # Liberar objeto mail
             try: win32.client.CastTo(mail, 'win32com.client.Dispatch')._oleobj_.Release()
             except: pass
             del mail 
             
        if outlook is not None:
             # Liberar objeto outlook
             try: win32.client.CastTo(outlook, 'win32com.client.Dispatch')._oleobj_.Release()
             except: pass
             del outlook      
        gc.collect() 
        try:
             # Finalizar expl√≠citamente el hilo COM
             pythoncom.CoUninitialize()
        except:
             pass

def send_etl_report(
    resultados: Dict[str, Tuple[int, str]],  # {nombre_modulo: (codigo_salida, output)}
    lst_emails: list[str],
    lst_subject: list[str],
    lst_body: list[str] # lst_body[0] = √âxito, lst_body[1] = Fallo
):
    """Selecciona el Subject y el Body del reporte bas√°ndose en listas y lo env√≠a, 
    permitiendo la inyecci√≥n de detalles en el body (placeholders)."""
    
    total_modulos = len(resultados)
    modulos_fallidos = {
        nombre: (code, out) 
        for nombre, (code, out) in resultados.items() 
        if code != 0
    }
    num_fallidos = len(modulos_fallidos)
    todos_ok = num_fallidos == 0
    
    # --- 1. Generaci√≥n de Subject ---
    if todos_ok:
        # Formateo din√°mico del Subject de √©xito
        subject = lst_subject[0].format(total=total_modulos)
    else:
        # Formateo din√°mico del Subject de fallo
        subject = lst_subject[1].format(num=num_fallidos, total=total_modulos)
    
    # --- 2. Generaci√≥n del Detalle de Errores (para inyectar en el Body de Fallo) ---
    # Creamos un bloque HTML espec√≠fico para los errores, que es la √∫nica parte 
    # que es din√°mica en el cuerpo del correo.
    detalle_errores_items = ""

# 1. Iteramos sobre TODOS los resultados para construir la lista completa
    for nombre, (code, output) in resultados.items():
        
        # 2. Definir Estado y Estilos
        if code == 0:
            estado_texto = "Proceso finalizado con √©xito."
            color = "green"
            # Para √âXITO, mostramos un mensaje simple en el recuadro de output
        else:
            estado_texto = "‚ùå ERROR CR√çTICO"
            color = "red"
            # Para ERROR, mostramos el detalle del output del proceso

        # 3. Generar la vi√±eta (<li>) para CADA m√≥dulo
        detalle_errores_items += f"""
        <li style="margin-bottom: 20px; padding: 10px; border-bottom: 1px dashed #ccc;">
            <div style="font-size: 1.1em;">
                M√≥dulo: <b>{nombre}</b> 
                <span style="float: right; font-size: 0.9em; color: {color};">(C√≥digo: {code})</span>
            </div>
            <div style="margin-top: 5px;">
                Estado: <span style="color: {color}; font-weight: bold;">{estado_texto}</span>
            </div>
            
        </li>
        """

    # 4. Envolvemos todos los items en una lista no ordenada (<ul>)
    # Esta variable es la que inyecta en {{detalle_errores}}
    detalle_errores = f"<ul style='list-style-type: none; padding-left: 0;'>{detalle_errores_items}</ul>"


    # --- 3. Generaci√≥n de Body HTML (Totalmente Parametrizado) ---
    if todos_ok:
        # Usamos lst_body[0] (√âxito) y lo formateamos
        body_html = lst_body[0].format(total_modulos=total_modulos)
    else:
        # Usamos lst_body[1] (Fallo) y lo formateamos con variables de error
        body_html = lst_body[1].format(
            num_fallidos=num_fallidos, 
            total_modulos=total_modulos,
            detalle_errores=detalle_errores # Inyectamos el detalle din√°mico
        )
            
    # 4. Env√≠o del Correo
    print(f"Generando y enviando reporte. Estado global: {'√âxito' if todos_ok else 'Fallo'}")
    correo(lst_emails, subject, body_html)
